name: Deploy Monitoring to Kubernetes AKS

on: 
  workflow_dispatch:
    inputs:
      tags:
        description: 'monitoring version'  

jobs:
  deploy:
    name: Deploy Monitoring to Kubernetes AKS
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Create kubeconfig
      run: |
        mkdir ${HOME}/.kube
        echo ${{ secrets.KUBE_CONFIG }} | base64 --decode > ${HOME}/.kube/config
    - name: Deploy Monitoring
      run: |
        helm repo add grafana https://grafana.github.io/helm-charts 
        helm repo add bitnami https://charts.bitnami.com/bitnami
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo update
        userminio=admin
        passminio="SomeLongPassword"
        userb64minio=$(echo -n $userminio | base64)
        passb64minio=$(echo -n $passminio | base64)
        kubectl create namespace monitoring --dry-run=client -o yaml  | kubectl apply -f - 
        helm upgrade --install minio bitnami/minio -n monitoring -i \
          --set auth.rootUser=$userminio                                 \
          --set auth.rootPassword=$passminio                   \
          --set defaultBuckets="blocks alert ruler" 
        cat << EOF > miniosecret.yaml
        apiVersion: v1
        kind: Secret
        metadata:
          name: mimir-bucket-secret
          namespace: monitoring
        stringData:
          MINIO_ACCESS_KEY_ID: $userminio
          MINIO_SECRET_ACCESS_KEY: $passminio
        EOF
        sleep 60
        kubectl  apply -f miniosecret.yaml -n monitoring 
        helm upgrade --install prometheus prometheus-community/prometheus \
          --set alertmanager.persistentVolume.enabled=false \
          --set server.persistentVolume.enabled=false \
          --set pushgateway.persistentVolume.enabled=false \
          --namespace monitoring 
        helm upgrade --install mimir grafana/mimir-distributed -n monitoring -f monitoring-aks/values-mimir.yaml
        #delete statefulsets to avoid data loss
        kubectl delete statefulset mimir-ingester-zone-a --cascade=false -n monitoring
        kubectl delete statefulset mimir-ingester-zone-c --cascade=false -n monitoring
        helm upgrade --install loki grafana/loki-stack --namespace monitoring 
        helm upgrade --install tempo grafana/tempo-distributed --namespace monitoring \
          --set compactor.replicas=1 \
          --set distributor.replicas=1 \
          --set gateway.replicas=1\
          --set ingester.replicas=1 \
          --set memcached.replicas=1 \
          --set metricsGenerator.replicas=1 \
          --set querier.replicas=1 \
          --set queryFrontend.replicas=1 
        helm upgrade --install grafana grafana/grafana --namespace monitoring -f monitoring-aks/grafana-datasource.yaml 
        